<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="calcuMgmt">
	<select id="getCardSettlmntLstCnt" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT COUNT(1) TOT_CNT, SUM(COALESCE(A.ACQ_AMT, 0)) TR_AMT, SUM(COALESCE(A.ACQ_FEE, 0)) ORG_AMT,
			           SUM(COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) ACQ_AMT, SUM(COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) RE_AMT,
			           SUM(COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) RTN_AMT,
			           SUM(COALESCE(B.REASON_00 + B.REASON_01, 0)) RESR_AMT, SUM(COALESCE(C.REASON_99, 0)) ETC_AMT,            
			           SUM(COALESCE(A.DPST_AMT, 0)) DPST_AMT, 
			           SUM((COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) + (COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) - (COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) + COALESCE(B.REASON_00 + B.REASON_01, 0) + COALESCE(C.REASON_99, 0)) EXP_AMT,
			           SUM(COALESCE(A.DPST_AMT, 0) - ((COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) + (COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) - (COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) + COALESCE(B.REASON_00 + B.REASON_01, 0) + COALESCE(C.REASON_99, 0))) GAP_AMT
			    FROM TB_ACQ_STMT A, 
			        (SELECT AMT, DPST_DT, ACQ_DT, MBS_NO, OVER_FLG,
			                COALESCE(SUM(CASE WHEN REASON = '00' THEN AMT ELSE 0 END), 0) REASON_00,
			                COALESCE(SUM(CASE WHEN REASON = '01' THEN AMT ELSE 0 END), 0) REASON_01
			        FROM TB_ACQ_STMT_EXP
			        WHERE 1=1
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
		<![CDATA[
		        AND ST_TYPE != '9'
		        AND REASON != '99'
		        GROUP BY AMT, DPST_DT, ACQ_DT, MBS_NO, OVER_FLG) B,
		        (SELECT AMT, DPST_DT, ACQ_DT, MBS_NO, OVER_FLG,
		                COALESCE(SUM(CASE WHEN REASON = '99' THEN AMT ELSE 0 END), 0) REASON_99
		        FROM TB_ACQ_STMT_EXP
		        WHERE 1=1
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
		<![CDATA[
		        AND ST_TYPE != '9'
		        AND REASON = '99'
		        GROUP BY AMT, DPST_DT, ACQ_DT, MBS_NO, OVER_FLG) C
		    WHERE 1=1
		        AND B.AMT = A.DPST_AMT AND B.MBS_NO = A.MBS_NO
		        AND B.ACQ_DT = A.ACQ_DT AND B.OVER_FLG = A.OVER_FLG
		        AND C.AMT = A.DPST_AMT AND C.MBS_NO = A.MBS_NO
		        AND C.ACQ_DT = A.ACQ_DT AND C.OVER_FLG = A.OVER_FLG
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND A.DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='MER_TYPE != null and MER_TYPE != "ALL"'>
				<![CDATA[
					AND A.MBS_TYPE_CD = #{MER_TYPE}
				]]>
				</if>
				<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
				<![CDATA[
					AND A.CARD_CD = #{CardCompanyList}
				]]>
				</if>
				<if test='merNo != null and merNo != ""'>
				<![CDATA[
					AND A.MBS_NO = #{merNo}
				]]>
				</if>
				<if test='inOutChk != null and inOutChk != "ALL"'>
				<![CDATA[
					AND A.OVER_FLG = #{inOutChk}
				]]>
				</if>
		<![CDATA[
		ORDER BY A.ACQ_DT, A.DPST_DT, A.CARD_CD, A.MBS_NO
		]]> 
	</select>
	
	<select id="getCardSettlmntLst" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		 SELECT * 
            FROM (      
			SELECT ROWNUM AS RNUM,
				   A.MBS_NO, 
				   A.ACQ_DT, 
				   A.OVER_FLG, 
				   A.CARD_CD, 
				   FN_NM_CODE1('card_cd', A.CARD_CD) FN_NM, 
				   (COALESCE(A.ACQ_AMT, 0)) TR_AMT, 
				   (COALESCE(A.ACQ_FEE, 0)) ORG_AMT,
		           (COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) ACQ_AMT, 
		           (COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) RE_AMT,
		           (COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) RTN_AMT,
		           COALESCE(B.REASON_00 + B.REASON_01, 0) RESR_AMT, 
		           COALESCE(C.REASON_99, 0) ETC_AMT,            
		           COALESCE(A.DPST_AMT, 0) DPST_AMT, 
		           ((COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) + (COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) - (COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) + COALESCE(B.REASON_00 + B.REASON_01, 0) + COALESCE(C.REASON_99, 0)) EXP_AMT,
		           (COALESCE(A.DPST_AMT, 0) - ((COALESCE(A.ACQ_AMT, 0) - COALESCE(A.ACQ_FEE, 0)) + (COALESCE(A.ACQ_RE_AMT, 0) - COALESCE(A.ACQ_RE_FEE, 0)) - (COALESCE(A.ACQ_RTN_AMT, 0) - COALESCE(A.ACQ_RTN_FEE, 0)) + COALESCE(B.REASON_00 + B.REASON_01, 0) + COALESCE(C.REASON_99, 0))) GAP_AMT,
		           A.DPST_DT, 
		           A.MBS_TYPE_CD, 
		           A.CONFIRM_FLG
		    FROM TB_ACQ_STMT A,
		        (SELECT DPST_DT, ACQ_DT, MBS_NO, OVER_FLG, 
		                COALESCE(SUM(CASE WHEN REASON = '00' THEN AMT ELSE 0 END), 0) REASON_00,
		                COALESCE(SUM(CASE WHEN REASON = '01' THEN AMT ELSE 0 END), 0) REASON_01
		        FROM TB_ACQ_STMT_EXP
		        WHERE 1=1
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
		<![CDATA[
		        AND ST_TYPE != '9'
		        AND REASON != '99'
		        GROUP BY DPST_DT, ACQ_DT, MBS_NO, OVER_FLG) B,  
		        (SELECT DPST_DT, ACQ_DT, MBS_NO, OVER_FLG,
		                COALESCE(SUM(CASE WHEN REASON = '99' THEN AMT ELSE 0 END), 0) REASON_99
		        FROM TB_ACQ_STMT_EXP
		        WHERE 1=1
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
		<![CDATA[  
		        AND ST_TYPE != '9'
		        AND REASON = '99'
		        GROUP BY DPST_DT, ACQ_DT, MBS_NO, OVER_FLG) C
		    WHERE 1=1
		        AND B.DPST_DT = A.DPST_DT AND B.MBS_NO = A.MBS_NO 
		        AND B.ACQ_DT = A.ACQ_DT AND B.OVER_FLG = A.OVER_FLG
		        AND C.DPST_DT = A.DPST_DT AND C.MBS_NO = A.MBS_NO 
		        AND C.ACQ_DT = A.ACQ_DT AND C.OVER_FLG = A.OVER_FLG
		]]>
				<if test='searchType == "0"'>
				<![CDATA[
					AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='searchType == "1"'>
				<![CDATA[
					AND A.DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='MER_TYPE != null and MER_TYPE != "ALL"'>
				<![CDATA[
					AND A.MBS_TYPE_CD = #{MER_TYPE}
				]]>
				</if>
				<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
				<![CDATA[
					AND A.CARD_CD = #{CardCompanyList}
				]]>
				</if>
				<if test='merNo != null and merNo != ""'>
				<![CDATA[
					AND A.MBS_NO = #{merNo}
				]]>
				</if>
				<if test='inOutChk != null and inOutChk != "ALL"'>
				<![CDATA[
					AND A.OVER_FLG = #{inOutChk}
				]]>
				</if>
		<![CDATA[
				ORDER BY A.ACQ_DT, A.DPST_DT, A.CARD_CD, A.MBS_NO
		]]> 
		<![CDATA[
            ) TBL
            ]]>
		<if test="intPageStart != null and intPageStart != ''">
           <![CDATA[
               WHERE RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
           ]]>
       </if>
       
       <if test="intPageStart == null or intPageStart == ''">
           <![CDATA[
               WHERE RNUM BETWEEN 1 AND 50000
           ]]>
       </if>
	</select>
	
	<select id="getReceiveDeferLstCnt" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT COUNT(1)
			  FROM TB_ACQ_STMT_EXP A 
			 WHERE 1=1
			   AND A.REASON != '99'
			   AND A.ST_TYPE != '9'		
		]]>
				<if test='dateChk == "2"'>
				<![CDATA[
					AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='dateChk == "1"'>
				<![CDATA[
					AND A.DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='MER_TYPE != null and MER_TYPE != "ALL"'>
				<![CDATA[
					AND A.MBS_TYPE_CD = #{MER_TYPE}
				]]>
				</if>
				<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
				<![CDATA[
					AND A.CARD_CD = #{CardCompanyList}
				]]>
				</if>
				<if test='merNo != null and merNo != ""'>
				<![CDATA[
					AND A.MBS_NO = #{merNo}
				]]>
				</if>
				<if test='inOutChk != null and inOutChk != "ALL"'>
				<![CDATA[
					AND A.OVER_FLG = #{inOutChk}
				]]>
				</if>
	</select>
	
	<select id="getReceiveDeferLst" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		 SELECT * 
            FROM (      
			SELECT ROWNUM AS RNUM,
				   A.MBS_NO, 
				   FN_NM_CODE1 ('card_cd', B.MBS_TYPE_CD) CARD_NM, 
				   A.DPST_DT,
			       A.ACQ_DT, 
			       A.AMT, 
			       A.TID,
			       FN_NM_CODE1 ('exp_reason', A.REASON) REASON_NM, 
			       A.REASON, 
			       A.ST_TYPE,
			       A.REG_DT, A.SEQ,
			       CASE
			       	 WHEN A.OVER_FLG = '0'
			         THEN '국내'
			       ELSE '해외'
			       END OVER_FLG_NM, 
			       A.OVER_FLG, 
			       A.MEMO
			  FROM TB_ACQ_STMT_EXP A, TB_CARD_MBS B
			 WHERE 1 = 1
	           AND B.MBS_NO = A.MBS_NO
			   AND A.ACQ_DT BETWEEN B.FR_DT AND B.TO_DT
			   AND A.REASON != '99'
			   AND A.ST_TYPE != '9'
		]]>
				<if test='dateChk == "2"'>
				<![CDATA[
					AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='dateChk == "1"'>
				<![CDATA[
					AND A.DPST_DT BETWEEN #{frDt} AND #{toDt}
				]]>
				</if>
				<if test='MER_TYPE != null and MER_TYPE != "ALL"'>
				<![CDATA[
					AND A.MBS_TYPE_CD = #{MER_TYPE}
				]]>
				</if>
				<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
				<![CDATA[
					AND A.CARD_CD = #{CardCompanyList}
				]]>
				</if>
				<if test='merNo != null and merNo != ""'>
				<![CDATA[
					AND A.MBS_NO = #{merNo}
				]]>
				</if>
				<if test='inOutChk != null and inOutChk != "ALL"'>
				<![CDATA[
					AND A.OVER_FLG = #{inOutChk}
				]]>
				</if>
		<![CDATA[
				ORDER BY A.ACQ_DT
		]]> 
		<![CDATA[
            ) TBL
            ]]>
		<if test="intPageStart != null and intPageStart != ''">
           <![CDATA[
               WHERE RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
           ]]>
       </if>
       
       <if test="intPageStart == null or intPageStart == ''">
           <![CDATA[
               WHERE RNUM BETWEEN 1 AND 50000
           ]]>
       </if>
	</select>
	
	<!-- 차액 내역 삭제 -->
  	<update id="delAcqSettExp" parameterType="hashmap">
  		<![CDATA[
    		UPDATE TB_ACQ_STMT_EXP
			   SET ST_TYPE = '9',
			       WORKER = #{worker}
			 WHERE SEQ = #{seq}
    	]]>
  	</update>
  	
  	<!-- 신용카드 입금보고서 차액(기타) Count -->
  	<select id="getCardSettlmntExpLstCnt" parameterType="hashmap" resultType="hashmap">
  		<![CDATA[
    		SELECT COUNT(1)
			  FROM TB_ACQ_STMT_EXP A
			  LEFT OUTER JOIN TB_ACQ_STMT B ON A.MBS_NO = B.MBS_NO
			 WHERE A.DPST_DT BETWEEN #{frDt} AND #{toDt}
			 AND A.REASON = '99'
			 AND A.ST_TYPE != '9'
    	]]>
    	<if test='searchType == "0"'>
			<![CDATA[
				AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
			]]>
		</if>
    	<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
			<![CDATA[
				AND B.CARD_CD = #{CardCompanyList}
			]]>
		</if>
    	<if test='merNo != null and merNo != ""'>
			<![CDATA[
				AND A.MBS_NO = #{merNo}
			]]>
		</if>
  	</select>
  	
  	<!-- 신용카드 입금보고서 차액(기타) List -->
  	<select id="getCardSettlmntExpLst" parameterType="hashmap" resultType="hashmap">
  		<![CDATA[
  		SELECT * 
          FROM (      
			SELECT ROWNUM AS RNUM,
	    		   A.SEQ, 
	    		   FN_NM_CODE1 ('card_cd', B.MBS_TYPE_CD) CARD_NM, 
	    		   A.MBS_NO,
			       A.DPST_DT, 
			       A.ACQ_DT, 
			       A.MEMO, 
			       A.AMT
			  FROM TB_ACQ_STMT_EXP A,
			  	   TB_CARD_MBS B			       
			 WHERE 1=1
			   AND B.MBS_NO = A.MBS_NO 
			   AND A.DPST_DT BETWEEN B.FR_DT AND B.TO_DT
			   AND A.DPST_DT BETWEEN #{frDt} AND #{toDt} 
			   AND A.REASON = '99' 
			   AND A.ST_TYPE != '9'
		]]>   
		<if test='searchType == "0"'>
			<![CDATA[
				AND A.ACQ_DT BETWEEN #{frDt} AND #{toDt}
			]]>
		</if>
    	<if test='CardCompanyList != null and CardCompanyList != "ALL"'>
			<![CDATA[
				AND A.CARD_CD = #{CardCompanyList}
			]]>
		</if>
    	<if test='merNo != null and merNo != ""'>
			<![CDATA[
				AND A.MBS_NO = #{merNo}
			]]>
		</if>
			<![CDATA[
				ORDER BY A.SEQ
            ) TBL
            ]]>
		<if test="intPageStart != null and intPageStart != ''">
           <![CDATA[
               WHERE RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
           ]]>
        </if>
  	</select>
  	
  	<!-- 차액(보류/해제)내역 생성 -->
	<insert id="insCardSettlmntRD" parameterType="hashmap">
		<![CDATA[
			INSERT 
			  INTO TB_ACQ_STMT_EXP(SEQ, 
			                       MBS_NO, 
			                       OVER_FLG, 
			                       DPST_DT, 
			                       ACQ_DT, 
			                       REASON, 
			                       AMT, 
			                       TID, 
			                       MEMO, 
			                       ST_TYPE, 
			                       REG_DT, 
			                       WORKER, 
			                       REG_DNT
			                       )
			VALUES(SEQ_ACQ_STMT_EXP.NEXTVAL, 
			       #{mbsNo}, 
			       #{overFlg},
			       #{dpstDt}, 
			       #{acqDt}, 
			       '00', 
			       #{amt}, 
			       #{tid}, 
			       #{memo}, 
			       #{stType}, 
			       DATE_FORMAT(NOW(), "%Y%m%d"), 
			       #{worker}, 
			       DATE_FORMAT(NOW(), "%Y%m%d%H")
			       )
		]]>
	</insert>
	
	<!-- 차액내역 생성 -->
  	<insert id="insCardSettlmntExp" parameterType="hashmap">
		<![CDATA[
			INSERT 
			  INTO TB_ACQ_STMT_EXP(SEQ, 
			                       MBS_NO, 
			                       OVER_FLG, 
			                       DPST_DT, 
			                       ACQ_DT, 
			                       REASON, 
			                       AMT, 
			                       TID, 
			                       MEMO, 
			                       ST_TYPE, 
			                       REG_DT, 
			                       WORKER, 
			                       REG_DNT
			                       )
			VALUES(SEQ_ACQ_STMT_EXP.NEXTVAL, 
			       #{mbsNo}, 
			       #{overFlg},
			       #{dpstDt}, 
			       #{acqDt}, 
			       '99', 
			       #{amt}, 
			       #{tid}, 
			       #{memo}, 
			       #{stType}, 
			       DATE_FORMAT(NOW(), "%Y%m%d"), 
			       #{worker}, 
			       DATE_FORMAT(NOW(), "%Y%m%d%H")
			       )
		]]>
	</insert>
	
	<!-- 신용카드 입금보고서 차액(보류/해제)에서 TID 정보 조회 -->
  	<select id="getReceiveDeferGetTIDData" parameterType="String" resultType="hashmap">
  		<![CDATA[
		    SELECT MBS_NO, OVER_FLG, FN_CODE1 ('0163', OVER_FLG) AS OVER_FLG_NM,
			       NVL (  GOODS_AMT
			               - FN_BASE_FEE (MID,
			                              ACQ_CARD_CD,
			                              NOINT_FLG,
			                              SPM_CD,
			                              MBS_NO,
			                              QUOTA_MON,
			                              APP_DT,
			                              GOODS_AMT,
			                              CHKCARD_FLG,
			                              FN_OVER_CARD (APP_CARD_CD)
			                             ),
			               0
			              ) GOODS_AMT
			  FROM TB_ACQ
			 WHERE TID = #{tid}
			   AND ROWNUM = 1
		]]>
  	</select>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	<!-- 입금보고서 관련 쿼리 start -->
  	
  	<select id="selectUserAccountMgmtList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        	SELECT TBL.*
       		FROM (
	            SELECT @rownum:=@rownum+1 AS RNUM  
	            	, IFNULL(AL.MID, 0) AS MID 
					, IFNULL(B.CO_NM, 0) AS CO_NM
				    , AL.STMT_DT
				    , IFNULL(AL.APP_AMT, 0) AS APP_AMT
				    , IFNULL(AL.CAN_AMT, 0) AS CAN_AMT
				    , IFNULL(AL.RESR_AMT, 0) AS RESR_AMT
				    , IFNULL(AL.RESR_CC_AMT, 0) AS RESR_CC_AMT
				    , IFNULL(AL.EXTRA_AMT, 0) AS EXTRA_AMT
				    , IFNULL(AL.FEE, 0) AS FEE
				    , IFNULL(AL.VAT, 0) AS VAT
				    , IFNULL((AL.DEPOSIT_AMT + AL.RESR_AMT*(-1) + AL.RESR_CC_AMT +  AL.EXTRA_AMT), 0) AS DEPOSIT_AMT
				FROM (    
					SELECT A.MID
						, A.STMT_DT
						, SUM(A.APP_AMT) AS APP_AMT
						, SUM(A.CC_AMT) AS CAN_AMT
						
						, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '01' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_AMT
						, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '02' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_CC_AMT
						
						, IFNULL((SELECT SUM(X.AMT) FROM TB_EXTRA_HIST X WHERE X.EXTRA_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0)
							- IFNULL((SELECT SUM(X.AMT*(-1)) FROM TB_EXTRA_HIST X WHERE X.OFF_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0) AS EXTRA_AMT
							
						, SUM(A.FEE) AS FEE
						, SUM(A.VAT) AS VAT
						, SUM(DPST_AMT) AS DEPOSIT_AMT
					FROM TB_SUB_STMT A, (SELECT @rownum:=0) tmp 
					WHERE 1=1
        ]]>
        
        <choose>
      		<when test="MER_TYPE=='m'.toString()">
      		<![CDATA[
      			AND A.MID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='g'.toString()">
      		<![CDATA[
      			AND A.GID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='v'.toString()" >
      		<![CDATA[
      			AND A.VID = #{MER_ID}
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>
      	
      	<if test="PM_CD_TYPE != null and PM_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.PM_CD = #{PM_CD_TYPE}
		     ]]>	
	     </if>
      	AND A.STMT_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      	
      	<if test="MBS_CD_TYPE != null and MBS_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.MBS_TYPE_CD = #{MBS_CD_TYPE}
		     ]]>	
	     </if>
					     
        <!-- <isEqual prepend="WHERE" property="id_cl" compareValue="0"> a.mid = #usr_id:VARCHAR# </isEqual>
			  <isEqual prepend="WHERE" property="id_cl" compareValue="1"> a.gid = #usr_id:VARCHAR# </isEqual>
			  <isEqual prepend="WHERE" property="id_cl" compareValue="2"> a.aid = #usr_id:VARCHAR# </isEqual>
			  and a.settlmnt_dt between #frDt:VARCHAR# and #toDt:VARCHAR#			  
			  <isNotEqual prepend="AND" property="SvcCd"  compareValue="all"> (a.svc_cd = #SvcCd:VARCHAR# or a.svc_cd in (select x.code1 from tb_code x where x.code_cl = '0022' and x.code2 = #SvcCd:VARCHAR#))</isNotEqual>
			 <isNotEqual prepend="AND" property="joinType" compareValue="all"> ifnull(a.join_type,'1') = #joinType# </isNotEqual> -->
        
        <![CDATA[
	            	GROUP BY A.MID, A.STMT_DT
	            	ORDER BY A.STMT_DT DESC
				) AL, TB_MBS B, (SELECT @rownum:=0) tmp
				WHERE AL.MID = B.MID
				
			)TBL
            WHERE RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
        ]]>
    </select>
  	
  	<select id="selectUserAccountMgmtListCnt" parameterType="hashmap" resultType="integer">
    	<![CDATA[
            SELECT COALESCE(COUNT(1),0)
			FROM (    
				SELECT A.MID
					, A.STMT_DT
					, SUM(A.APP_AMT) AS APP_AMT
					, SUM(A.CC_AMT) AS CAN_AMT
					
					, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '01' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_AMT
					, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '02' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_CC_AMT
					
					, IFNULL((SELECT SUM(X.AMT) FROM TB_EXTRA_HIST X WHERE X.EXTRA_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0)
						- IFNULL((SELECT SUM(X.AMT*(-1)) FROM TB_EXTRA_HIST X WHERE X.OFF_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0) AS EXTRA_AMT
						
					, SUM(A.FEE) AS FEE
					, SUM(A.VAT) AS VAT
					, SUM(DPST_AMT) AS DEPOSIT_AMT
				FROM TB_SUB_STMT A
				WHERE 1=1
        ]]>
        
        <choose>
      		<when test="MER_TYPE=='m'.toString()">
      		<![CDATA[
      			AND A.MID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='g'.toString()">
      		<![CDATA[
      			AND A.GID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='v'.toString()" >
      		<![CDATA[
      			AND A.VID = #{MER_ID}
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>
      	
      	<if test="PM_CD_TYPE != null and PM_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.PM_CD = #{PM_CD_TYPE}
		     ]]>	
	     </if>
      	
      	AND A.STMT_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      	
      	<if test="MBS_CD_TYPE != null and MBS_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.MBS_TYPE_CD = #{MBS_CD_TYPE}
		     ]]>	
	     </if>
	     
        <!-- <isEqual prepend="WHERE" property="id_cl" compareValue="0"> a.mid = #usr_id:VARCHAR# </isEqual>
			  <isEqual prepend="WHERE" property="id_cl" compareValue="1"> a.gid = #usr_id:VARCHAR# </isEqual>
			  <isEqual prepend="WHERE" property="id_cl" compareValue="2"> a.aid = #usr_id:VARCHAR# </isEqual>
			  and a.settlmnt_dt between #frDt:VARCHAR# and #toDt:VARCHAR#			  
			  <isNotEqual prepend="AND" property="SvcCd"  compareValue="all"> (a.svc_cd = #SvcCd:VARCHAR# or a.svc_cd in (select x.code1 from tb_code x where x.code_cl = '0022' and x.code2 = #SvcCd:VARCHAR#))</isNotEqual>
			 <isNotEqual prepend="AND" property="joinType" compareValue="all"> ifnull(a.join_type,'1') = #joinType# </isNotEqual> -->
        
        <![CDATA[
            	GROUP BY A.MID, A.STMT_DT
			) AL, TB_MBS B
			WHERE AL.MID = B.MID
        ]]>
        
    </select>
    
    
    <select id="selectUserAccountMgmtListDetail" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
            SELECT TBL.RNUM 
            	, TBL.MID
				, TBL.STMT_DT
                , TBL.APP_DT
				, TBL.SVC_CD_NM
                , TBL.APP_CO
                , TBL.TID
                , IFNULL(TBL.TR_AMT, 0) AS TR_AMT
                , TBL.GOODS_NM
                , TBL.ORD_NM
                , IFNULL(TBL.FEE, 0) AS FEE
                , IFNULL(TBL.VAT, 0) AS VAT
                , IFNULL(TBL.SMS_FEE, 0) AS SMS_FEE
                , IFNULL(TBL.DPST_AMT, 0) AS DPST_AMT
                
				, TBL.PM_CD
                , TBL.ORD_NM_ENC
            FROM (
				SELECT @rownum:=@rownum+1 AS RNUM
					, A.MID
					, A.STMT_DT
	                , B.APP_DT
					, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0022' AND USE_FLG = '1' AND CODE1=A.PM_CD LIMIT 1) AS SVC_CD_NM
	                , (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0022' AND USE_FLG = '1' AND CODE1=A.PM_CD LIMIT 1) AS APP_CO
	                , A.TID
	                , A.TR_AMT
	                , B.GOODS_NM
	                , B.ORD_NM
	                , A.FEE
	                , A.VAT
	                , '0' AS SMS_FEE
	                , A.DPST_AMT
	                
					, A.PM_CD
	                , B.ORD_NM_ENC
	             FROM TB_STMT_TID A LEFT OUTER JOIN TB_TRX_HIST B
	             ON A.TID = B.TID
	             , (SELECT @rownum:=0) tmp
	             WHERE 1=1
        ]]>
        
        <choose>
      		<when test="MER_TYPE=='m'.toString()">
      		<![CDATA[
      			AND A.MID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='g'.toString()">
      		<![CDATA[
      			AND A.GID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='v'.toString()" >
      		<![CDATA[
      			AND A.VID = #{MER_ID}
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>

		<if test="PM_CD_TYPE != null and PM_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.PM_CD = #{PM_CD_TYPE}
		     ]]>	
	     </if>
	     
	    <choose>
      		<when test="SEARCH_DATE_TYPE=='1'.toString()">
      		<![CDATA[
      			AND A.STMT_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      		]]>
      		</when>
      		<when test="SEARCH_DATE_TYPE=='2'.toString()">
      		<![CDATA[
      			AND A.TR_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>
      	 
      	<if test="MBS_CD_TYPE != null and MBS_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.MBS_TYPE_CD = #{MBS_CD_TYPE}
		     ]]>	
	     </if>
	     
        <!-- <if test="DTL_USR_ID == null or DTL_USR_ID == ''">
	        <if test="USR_ID != null and USR_ID != ''">
	            <![CDATA[
	                AND A.USR_ID LIKE '%'||#{USR_ID}||'%' 
	            ]]>
	        </if>
        </if> -->
        
        <![CDATA[
        		ORDER BY A.STMT_DT DESC
            )TBL
            WHERE RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
            
        ]]>
    </select>
    
    <select id="selectUserAccountMgmtListCntDetail" parameterType="hashmap" resultType="integer">
        <![CDATA[
           SELECT COALESCE(COUNT(1),0)
           FROM TB_STMT_TID A LEFT OUTER JOIN TB_TRX_HIST B
           ON A.TID = B.TID
           WHERE 1=1
        ]]>
        
        <choose>
      		<when test="MER_TYPE=='m'.toString()">
      		<![CDATA[
      			AND A.MID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='g'.toString()">
      		<![CDATA[
      			AND A.GID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='v'.toString()" >
      		<![CDATA[
      			AND A.VID = #{MER_ID}
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>

		<if test="PM_CD_TYPE != null and PM_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.PM_CD = #{PM_CD_TYPE}
		     ]]>	
	     </if>
	     
	    <choose>
      		<when test="SEARCH_DATE_TYPE=='1'.toString()">
      		<![CDATA[
      			AND A.STMT_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      		]]>
      		</when>
      		<when test="SEARCH_DATE_TYPE=='2'.toString()">
      		<![CDATA[
      			AND A.TR_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>
      	 
      	<if test="MBS_CD_TYPE != null and MBS_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.MBS_TYPE_CD = #{MBS_CD_TYPE}
		     ]]>	
	     </if>
	     
        <!-- <if test="USR_ID != null and USR_ID != ''">
            <![CDATA[
                AND A.USR_ID LIKE '%'||#{USR_ID}||'%' 
            ]]>
        </if> -->
        
    </select>
    
    <select id="selectDepositSum" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
            SELECT IFNULL(SUM(AL.TOTAL_CNT), 0) AS TOTAL_CNT
				, IFNULL(SUM(AL.APP_AMT), 0) AS APP_AMT
		        , IFNULL(SUM(CAN_AMT), 0) AS CAN_AMT
		        , IFNULL(SUM(RESR_AMT), 0) AS RESR_AMT
		        , IFNULL(SUM(RESR_CC_AMT), 0) RESR_CC_AMT
		        , IFNULL(SUM(EXTRA_AMT), 0) AS EXTRA_AMT
		        , IFNULL(SUM(FEE), 0) AS FEE
		        , IFNULL(SUM(VAT), 0) AS VAT
		        , IFNULL(SUM((DEPOSIT_AMT + RESR_AMT*(-1) + RESR_CC_AMT + EXTRA_AMT)), 0) AS DEPOSIT_AMT
		    FROM (
				SELECT COUNT(DISTINCT(CONCAT(A.STMT_DT, A.MID))) AS TOTAL_CNT
					, SUM(A.APP_AMT) AS APP_AMT
					, SUM(A.CC_AMT) AS CAN_AMT
					
					, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '01' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_AMT
					, IFNULL((SELECT SUM(X.RESR_AMT) FROM TB_DFR_RELESE X WHERE X.ID = A.MID AND X.RESR_TYPE = '02' AND X.RESR_DT = A.STMT_DT AND X.DEL_FLG = '0'), 0) AS RESR_CC_AMT
					
					, IFNULL((SELECT SUM(X.AMT) FROM TB_EXTRA_HIST X WHERE X.EXTRA_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0)
						- IFNULL((SELECT SUM(X.AMT*(-1)) FROM TB_EXTRA_HIST X WHERE X.OFF_ID = A.MID AND X.EXTRA_DT = A.STMT_DT AND DEL_FLG = '0'), 0) AS EXTRA_AMT
						
					, SUM(A.FEE) AS FEE
					, SUM(A.VAT) AS VAT
					, SUM(DPST_AMT) AS DEPOSIT_AMT
				FROM TB_SUB_STMT A
				WHERE 1=1
        ]]>
        
        <choose>
      		<when test="MER_TYPE=='m'.toString()">
      		<![CDATA[
      			AND A.MID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='g'.toString()">
      		<![CDATA[
      			AND A.GID = #{MER_ID}
      		]]>
      		</when>
      		<when test="MER_TYPE=='v'.toString()" >
      		<![CDATA[
      			AND A.VID = #{MER_ID}
      		]]>
      		</when>
      		<otherwise></otherwise>
      	</choose>

		<if test="PM_CD_TYPE != null and PM_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.PM_CD = #{PM_CD_TYPE}
		     ]]>	
	     </if>
	     
      	AND A.STMT_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
      	
      	<if test="MBS_CD_TYPE != null and MBS_CD_TYPE != 'ALL'.toString()">
		     <![CDATA[
		     AND A.MBS_TYPE_CD = #{MBS_CD_TYPE}
		     ]]>	
	     </if>
	     
        <!-- <isEqual prepend="WHERE" property="id_cl" compareValue="0"> a.mid = #usr_id:VARCHAR# </isEqual>
			<isEqual prepend="WHERE" property="id_cl" compareValue="1"> a.gid = #usr_id:VARCHAR# </isEqual>
			<isEqual prepend="WHERE" property="id_cl" compareValue="2"> a.aid = #usr_id:VARCHAR# </isEqual>
			and a.settlmnt_dt between #frDt:VARCHAR# and #toDt:VARCHAR#
			<isNotEqual prepend="AND" property="SvcCd"  compareValue="all"> (a.svc_cd = #SvcCd:VARCHAR# or a.svc_cd in (select x.code1 from tb_code x where x.code_cl = '0022' and x.code2 = #SvcCd:VARCHAR#))</isNotEqual>
			<isNotEqual prepend="AND" property="joinType" compareValue="all"> ifnull(a.join_type,'1') = #joinType# </isNotEqual> -->
        
        <![CDATA[
            GROUP BY A.MID, A.STMT_DT
    	) AL
        ]]>
    </select>
    
    <select id="selectTidDetail" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
            SELECT 
				IF(F.PM_CD='01', '이롬머니', '') AS PM_NM
				
				, (SELECT A.LOGIN_ID FROM TB_MSTR_USR A WHERE A.UID = F.UID) AS MBS_USR_ID
				, F.TID
				, F.ORD_NO
				, F.MID
				, F.GID
				, F.VID
				, F.PM_CD
				
				, DATE_FORMAT(F.APP_REQ_DNT, "%Y-%m-%d %H:%i:%s") APP_REQ_DNT
				, DATE_FORMAT(F.APP_DNT, "%Y-%m-%d %H:%i:%s") APP_DNT
				, F.GOODS_NM
				, IFNULL(F.GOODS_AMT, 0) AS GOODS_AMT
				, IFNULL(F.GOODS_SPL_AMT, 0) AS GOODS_SPL_AMT
				, IFNULL(F.GOODS_VAT, 0) AS GOODS_VAT
				, F.UID
				, F.CARD_NO
				, F.ORD_NM
				, F.ORD_NM_ENC
				, F.ORD_TEL
				, F.ORD_TEL_ENC
				, F.ORD_HP
				, F.ORD_HP_ENC
				, F.ORD_EMAIL
				, F.ORD_EMAIL_ENC
				, F.TRX_MSG
				, F.RSLT_CD
				, F.PM_MTHD_CD
				, F.PGSW_VER
				, F.MBS_DVC_ID
				, F.MBS_SCK_ID
				, F.APP_NO
				, F.TRX_ST_CD
				
				, CASE F.RSLT_SND_ST
					WHEN '10' then '미통보'
					when '20' then '통보'
				    WHEN '30' then '통보실패'
					when '40' then '대기'
				        else F.RSLT_SND_ST
				        end AS RSLT_SND_ST
				
				, DATE_FORMAT(F.RSLT_SND_DNT, "%Y%m%d") RSLT_SND_DNT
				
				, IF(F.AUTO_CHRG_CD='Y', '예', IF(F.AUTO_CHRG_CD='N', '아니오', '')) AS AUTO_CHRG_CD
				
				, F.PNT_ID
				, IF(F.RE_SND_FLG='Y', '재통보', '재통보안함') RE_SND_FLG
				, DATE_FORMAT(F.SND_DNT, "%Y%m%d") SND_DNT
				, DATE_FORMAT(F.RCV_DNT, "%Y%m%d") RCV_DNT
				, F.REG_ID
				, DATE_FORMAT(F.REG_DNT, "%Y%m%d") REG_DNT
				, DATE_FORMAT(F.UPD_DNT, "%Y%m%d") UPD_DNT
				
				, C.REASON_DESC
                , C.REASON_CD
                , C.REG_ID AS CC_REG_ID
				 FROM TB_MSTR_TRX F 
				 LEFT OUTER JOIN TB_CC_REQ C
                 ON F.TID = C.TID
                 
				 WHERE 1=1
				AND F.TID = #{tid}
	 
	 
		
        ]]>
        
        <!-- <if test="DTL_USR_ID == null or DTL_USR_ID == ''">
	        <if test="USR_ID != null and USR_ID != ''">
	            <![CDATA[
	                AND A.USR_ID LIKE '%'||#{USR_ID}||'%' 
	            ]]>
	        </if>
        </if> -->
        
        <![CDATA[
            ORDER BY C.REG_DNT DESC
        	LIMIT 1
        ]]>
    </select>
    
    
    
  	
  	<!-- 입금보고서 관련 쿼리 end -->
  	
  	
  	
  	<!-- 입금보류/해제/별도가감 start -->
  	
  	<select id="selectEtcDepositList" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
            SELECT TBL.*
			FROM (
				SELECT @rownum:=@rownum+1 AS RNUM
					, AL.MID
					, AL.STMT_DT
					, AL.REASON
					, AL.DETAIL_REASON
					, AL.RESR_AMT
					, AL.REMAIN_AMT
					, AL.EXTRA_AMT
					, AL.OFF_ID
					, AL.RESR_DESC
				FROM (
					(
					SELECT D.ID AS MID, D.RESR_DT AS STMT_DT
						, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1=D.RESR_TYPE LIMIT 1) AS REASON
						, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1=D.RESR_TYPE AND CODE2=D.RESR_REASON LIMIT 1) AS DETAIL_REASON
						, D.RESR_AMT
						, D.REMAIN_AMT
						, 0 AS EXTRA_AMT
						, NULL AS OFF_ID
						, D.RESR_DESC
					FROM TB_DFR_RELESE D
					WHERE 1=1
					AND D.RESR_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
					AND D.DEL_FLG = '0'
					
					]]>
					
					<choose>
			      		<when test="MER_TYPE=='m'.toString()">
			      		<![CDATA[
			      			AND D.ID = #{MER_ID}
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='g'.toString()">
			      		<![CDATA[
			      			AND D.ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='v'.toString()" >
			      		<![CDATA[
			      			AND D.ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
			      		]]>
			      		</when>
			      		<otherwise></otherwise>
			      	</choose>
      	
					<choose>
			      		<when test="CATEGORY_TYPE=='01'.toString()">
			      		<![CDATA[
			      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
			      		]]>
			      		</when>
			      		<when test="CATEGORY_TYPE=='02'.toString()">
			      		<![CDATA[
			      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
			      		]]>
			      		</when>
			      		<when test="CATEGORY_TYPE=='03'.toString()" >
			      		<![CDATA[
			      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
			      		]]>
			      		</when>
			      		<otherwise></otherwise>
			      	</choose>
			      	
			      	<![CDATA[
					)
					UNION ALL
					(
					SELECT E.EXTRA_ID AS MID, E.EXTRA_DT AS STMT_DT
						, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' LIMIT 1) AS REASON
						, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' AND CODE2=E.REASON LIMIT 1) AS DETAIL_REASON
						, 0 AS RESR_AMT
						, 0 AS REMAIN_AMT
						, E.AMT AS EXTRA_AMT
						, E.OFF_ID
						, E.MEMO AS RESR_DESC
					FROM TB_EXTRA_HIST E
					WHERE 1=1
					AND E.EXTRA_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
					AND E.DEL_FLG = '0'
					
					]]>
					
					<choose>
			      		<when test="MER_TYPE=='m'.toString()">
			      		<![CDATA[
			      			AND E.EXTRA_ID = #{MER_ID}
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='g'.toString()">
			      		<![CDATA[
			      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='v'.toString()" >
			      		<![CDATA[
			      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
			      		]]>
			      		</when>
			      		<otherwise></otherwise>
			      	</choose>
			      	
					<choose>
			      		<when test="CATEGORY_TYPE=='01'.toString()">
			      		<![CDATA[
			      			AND 1=2
			      		]]>
			      		</when>
			      		<when test="CATEGORY_TYPE=='02'.toString()">
			      		<![CDATA[
			      			AND 1=2
			      		]]>
			      		</when>
			      		
			      		<otherwise></otherwise>
			      	</choose>
			      	
			      	<![CDATA[
			      	
					)
					UNION ALL
					(
					SELECT E.OFF_ID AS MID, E.EXTRA_DT AS STMT_DT
						, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' LIMIT 1) AS REASON
						, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' AND CODE2=E.REASON LIMIT 1) AS DETAIL_REASON
						, 0 AS RESR_AMT
						, 0 AS REMAIN_AMT
						, E.AMT*(-1) AS EXTRA_AMT
						, E.OFF_ID
						, E.MEMO AS RESR_DESC
					FROM TB_EXTRA_HIST E
					WHERE 1=1
					AND E.EXTRA_ID = 'testpcp01m'
					AND E.EXTRA_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
					AND E.DEL_FLG = '0'
					
					]]>
					
					<choose>
			      		<when test="MER_TYPE=='m'.toString()">
			      		<![CDATA[
			      			AND E.EXTRA_ID = #{MER_ID}
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='g'.toString()">
			      		<![CDATA[
			      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
			      		]]>
			      		</when>
			      		<when test="MER_TYPE=='v'.toString()" >
			      		<![CDATA[
			      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
			      		]]>
			      		</when>
			      		<otherwise></otherwise>
			      	</choose>
			      	
					<choose>
			      		<when test="CATEGORY_TYPE=='01'.toString()">
			      		<![CDATA[
			      			AND 1=2
			      		]]>
			      		</when>
			      		<when test="CATEGORY_TYPE=='02'.toString()">
			      		<![CDATA[
			      			AND 1=2
			      		]]>
			      		</when>
			      		
			      		<otherwise></otherwise>
			      	</choose>
			      	
			      	<![CDATA[
					)
				) AL, (SELECT @rownum:=0) tmp
			
				ORDER BY AL.STMT_DT DESC
        ]]>
        
        <!-- <if test="DTL_USR_ID == null or DTL_USR_ID == ''">
	        <if test="USR_ID != null and USR_ID != ''">
	            <![CDATA[
	                AND A.USR_ID LIKE '%'||#{USR_ID}||'%' 
	            ]]>
	        </if>
        </if> -->
        
        <![CDATA[
            ) TBL
			WHERE TBL.RNUM BETWEEN ${intPageStart} AND ${intPageEnd}
        ]]>
    </select>
    
    <select id="selectEtcDepositListCnt" parameterType="hashmap" resultType="integer">
        <![CDATA[
           SELECT COALESCE(COUNT(1),0)
			FROM (
				(
				SELECT D.ID AS MID, D.RESR_DT AS STMT_DT
					, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1=D.RESR_TYPE LIMIT 1) AS REASON
					, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1=D.RESR_TYPE AND CODE2=D.RESR_REASON LIMIT 1) AS DETAIL_REASON
					, D.RESR_AMT
					, D.REMAIN_AMT
					, 0 AS EXTRA_AMT
					, NULL AS OFF_ID
					, D.RESR_DESC
				FROM TB_DFR_RELESE D
				WHERE 1=1
				AND D.RESR_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
				AND D.DEL_FLG = '0'
				]]>
					
				<choose>
		      		<when test="MER_TYPE=='m'.toString()">
		      		<![CDATA[
		      			AND D.ID = #{MER_ID}
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='g'.toString()">
		      		<![CDATA[
		      			AND D.ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='v'.toString()" >
		      		<![CDATA[
		      			AND D.ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
		      		]]>
		      		</when>
		      		<otherwise></otherwise>
		      	</choose>
			      		
				<choose>
		      		<when test="CATEGORY_TYPE=='01'.toString()">
		      		<![CDATA[
		      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
		      		]]>
		      		</when>
		      		<when test="CATEGORY_TYPE=='02'.toString()">
		      		<![CDATA[
		      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
		      		]]>
		      		</when>
		      		<when test="CATEGORY_TYPE=='03'.toString()" >
		      		<![CDATA[
		      			AND D.RESR_TYPE = #{CATEGORY_TYPE}
		      		]]>
		      		</when>
		      		<otherwise></otherwise>
		      	</choose>
		      	
		      	<![CDATA[
				)
				UNION ALL
				(
				SELECT E.EXTRA_ID AS MID, E.EXTRA_DT AS STMT_DT
					, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' LIMIT 1) AS REASON
					, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' AND CODE2=E.REASON LIMIT 1) AS DETAIL_REASON
					, 0 AS RESR_AMT
					, 0 AS REMAIN_AMT
					, E.AMT AS EXTRA_AMT
					, E.OFF_ID
					, E.MEMO AS RESR_DESC
				FROM TB_EXTRA_HIST E
				WHERE 1=1
				AND E.EXTRA_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
				AND E.DEL_FLG = '0'
				]]>
				
				<choose>
		      		<when test="MER_TYPE=='m'.toString()">
		      		<![CDATA[
		      			AND E.EXTRA_ID = #{MER_ID}
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='g'.toString()">
		      		<![CDATA[
		      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='v'.toString()" >
		      		<![CDATA[
		      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
		      		]]>
		      		</when>
		      		<otherwise></otherwise>
		      	</choose>
			      		
				<choose>
		      		<when test="CATEGORY_TYPE=='01'.toString()">
		      		<![CDATA[
		      			AND 1=2
		      		]]>
		      		</when>
		      		<when test="CATEGORY_TYPE=='02'.toString()">
		      		<![CDATA[
		      			AND 1=2
		      		]]>
		      		</when>
		      		
		      		<otherwise></otherwise>
		      	</choose>
		      	
		      	<![CDATA[
				)
				UNION ALL
				(
				SELECT E.OFF_ID AS MID, E.EXTRA_DT AS STMT_DT
					, (SELECT IFNULL(DESC1, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' LIMIT 1) AS REASON
					, (SELECT IFNULL(DESC2, '') FROM TB_CODE WHERE CODE_CL='0048' AND USE_FLG = '1' AND CODE1='03' AND CODE2=E.REASON LIMIT 1) AS DETAIL_REASON
					, 0 AS RESR_AMT
					, 0 AS REMAIN_AMT
					, E.AMT*(-1) AS EXTRA_AMT
					, E.OFF_ID
					, E.MEMO AS RESR_DESC
				FROM TB_EXTRA_HIST E
				WHERE 1=1
				AND E.EXTRA_DT BETWEEN REPLACE(#{fromdate}, '-', '') AND REPLACE(#{todate}, '-', '')
				AND E.DEL_FLG = '0'
				]]>
				
				<choose>
		      		<when test="MER_TYPE=='m'.toString()">
		      		<![CDATA[
		      			AND E.EXTRA_ID = #{MER_ID}
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='g'.toString()">
		      		<![CDATA[
		      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE GID = #{MER_ID})
		      		]]>
		      		</when>
		      		<when test="MER_TYPE=='v'.toString()" >
		      		<![CDATA[
		      			AND E.EXTRA_ID IN (SELECT MID FROM TB_MBS WHERE VID = #{MER_ID})
		      		]]>
		      		</when>
		      		<otherwise></otherwise>
		      	</choose>
		      	
				<choose>
		      		<when test="CATEGORY_TYPE=='01'.toString()">
		      		<![CDATA[
		      			AND 1=2
		      		]]>
		      		</when>
		      		<when test="CATEGORY_TYPE=='02'.toString()">
		      		<![CDATA[
		      			AND 1=2
		      		]]>
		      		</when>
		      		
		      		<otherwise></otherwise>
		      	</choose>
		      	
		      	<![CDATA[
				)
			) AL
        ]]>
        
        <!-- <if test="USR_ID != null and USR_ID != ''">
            <![CDATA[
                AND A.USR_ID LIKE '%'||#{USR_ID}||'%' 
            ]]>
        </if> -->
        
    </select>
  	
  	<!-- 입금보류/해제/별도가감 end -->
  	
</mapper>